{"version":3,"sources":["AddCategory/AddCategory.js","AddCategory/GifGridItem.js","Helpers/getGifs.js","AddCategory/GifGrid.js","useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","GifGridItem","id","title","url","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","gif","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","key","GifExpertApp","categories","game","ReactDOM","render","document","getElementById"],"mappings":"mLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACRC,mBAAS,IADD,mBACtCC,EADsC,KAC1BC,EAD0B,KAW9C,OACI,0BAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,OACtCJ,EAAc,MAIV,2BACIK,KAAK,OACLC,MAAOP,EACPQ,SAbc,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,YCLlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,oCACI,yBAAKC,IAAKD,EAAKE,IAAKH,IACpB,2BAAIA,K,uBCNHI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbL,EADa,iDACmCM,UAAUF,GAD7C,yFAEAG,MAAMP,GAFN,cAEbQ,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAKa,EAAIC,OAAOC,iBAAiBf,QARtB,kBAWZW,GAXY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACRlB,mBAAS,CAC/BwB,KAAM,GACNO,SAAS,IAHqB,mBAC3BC,EAD2B,KACpBC,EADoB,KAYtC,OAPAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAV,GAAI,OAAIQ,EAAS,CACnBT,KAAMC,EACNM,SAAS,SAElB,CAACb,IACGc,EDViBI,CAAalB,GAA9BM,EAD8B,EAC9BA,KAAMO,EADwB,EACxBA,QAEb,OACI,oCACI,4BAAKb,GAEDa,EACM,0CACA,qCAGNP,EAAKE,KAAI,SAAAW,GAAG,OACR,kBAAC,EAAD,CAAaC,IAAKD,EAAIzB,GAAIA,GAAIyB,EAAIzB,GAAIC,MAAOwB,EAAIxB,MAAOC,IAAKuB,EAAIvB,WEOtEyB,EAnBM,WAAO,IAAD,EACcvC,mBAAS,CAAC,SADxB,mBACfwC,EADe,KACHzC,EADG,KAGvB,OACI,oCACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEQyC,EAAWd,KAAK,SAACe,EAAMH,GAAP,OACZ,kBAAC,EAAD,CAASA,IAAKA,EAAKpB,SAAUuB,UCXrDC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3b1967e8.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n    const [ inputValue, setInputValue ] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategories(cats => [inputValue, ...cats,]);\n        setInputValue('');\n    }\n    return (\n        <form onSubmit={ handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n    return(\n        <>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </>\n    )\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&offset=0&rating=g&lang=en&api_key=Z079Z6dZ78w8wEj1mIMS0CisLuASCXs4`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map(gif => {\n        return{\n            id: gif.id,\n            title: gif.title,\n            url: gif.images.downsized_medium.url\n        }\n    });\n    return gifs;\n}\n","import React from \"react\";\nimport {GifGridItem} from \"./GifGridItem\";\nimport {useFetchGifs} from \"../useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n    const {data, loading} = useFetchGifs(category);\n\n    return(\n        <>\n            <h3>{category}</h3>\n            {\n                loading\n                    ? <p>Cargando...</p>\n                    : <></>\n            }\n            {\n                data.map(img => (\n                    <GifGridItem key={img.id} id={img.id} title={img.title} url={img.url} />\n                ))\n            }\n        </>\n    )\n}\n","import {useEffect, useState} from \"react\";\nimport {getGifs} from \"./Helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n        const [state, setState] = useState({\n            data: [],\n            loading: true\n        })\n    useEffect(() => {\n        getGifs(category)\n            .then(gifs => setState({\n                data: gifs,\n                loading: false\n            }))\n    }, [category]);\n    return state;\n}\n","import React, {useState} from \"react\";\nimport {AddCategory} from \"./AddCategory/AddCategory\";\nimport {GifGrid} from \"./AddCategory/GifGrid\";\n\n\nconst GifExpertApp = () => {\n    const [ categories, setCategories] = useState(['Halo']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n            <AddCategory setCategories={setCategories} />\n            <ol>\n                {\n                    categories.map( (game, key) => (\n                        <GifGrid key={key} category={game}></GifGrid>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}